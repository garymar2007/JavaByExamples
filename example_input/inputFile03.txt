At its most fundamental, a database is responsible for the storage and retrieval of data for an application. A database can also be called a Database Management System (DBMS) because it is an application that manages access to a physical data store. The core functions of a database are to:

And when providing these data services, a database needs to be reliable, efficient, and correct. It turns out that doing all these things at once is fairly complex. We will start by looking at the CAP theorem to understand the tradeoff at the very heart of database design.

We live in a physical world and cannot guarantee the stability of a network, so distributed databases must choose Partition Tolerance. This implies a tradeoff between Consistency and Availability. In other words if part of the cluster goes down, the system can either satisfy Consistency, roll back any unfinished operations and wait to respond until all nodes are stable again. Or it can satisfy Availability, continue responding but risk inconsistencies.

A system is called a CP database if it provides Consistency and Partition Tolerance, and an AP database if it provides Availability and Partition Tolerance.

Now that we have talked about the theoretical constraints of the CAP Theorem, let us look at the fundamental unit of database operations: the transaction.
 Correct System Design starts with knowing what not to do. Knowing what not to do is as simple as avoiding functional decomposition. But we're gonna have to devote a whole hour for it, simply because functional decomposition is the prevailing way of designing more system and this is what you're likely doing right now. And so we're gonna spend the first hour so just discussing all the perils and the problems of functional decomposition, remits preclude from actually ever walking.
Not all databases choose to support ACID transactions, usually because they are prioritizing other optimizations that are hard or theoretically impossible to implement together. Usually relational databases do support ACID transactions, and non-relational databases do not.

Hello, welcome to this presentation on system design fundamentals. My name is Juval Lowy. We're gonna spend the next few hours diving into what does it take to correctly design software systems. And I hope to completely change the way you have been doing it so far. A few words about myself. I'm a software architect, I'm the principal of IDesign, a company I started 20 years ago, devoted for nothing but software design. And when I say software design, I mean system design and project design. System design architecture is a subject of today's presentation. I will have a future session on project design as well. I've helped hundreds of
companies all around the world develop using these techniques and meet their commitments. I conduct Master Classes on
Regardless of ACID support, database transactions make changes that need to be consistent with the organization of data within the database. Next we will look at the different ways a system designer can specify this data structure organization, called a schema, and the impacts theseâ„¦ design choices have on performance.
