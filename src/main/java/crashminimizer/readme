
Menu
1
2
Q
package crashminimizer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class CrashMinimizer {

    /**
     * This function minimizes a crashing test case to
     * a single character that still causes the crash.
     *
     * @param String command - the command to execute the
     *                         program under test.
     *
     * @param String failingTestInputFilename - the path
     *                to the file causing a crash in the
     *                target program. The contents of
     *                this file are to be minimized by
     *                this function.
     *
     * @return String - the final, minimized version of the
     *                failing test input file which still
     *                causes a crash.
    */
    public static String minimize(
        String command,
        String failingInputFilename
    ) throws FileNotFoundException, IOException {
        List<String> lines = Utilities.readFile(failingInputFilename);
        String line = Utilities.runCommand(command + " " + failingInputFilename);


        return "";
    }
}
1
package crashminimizer;
2
​
3
import java.io.BufferedReader;
4
import java.io.File;
5
import java.io.FileNotFoundException;
6
import java.io.IOException;
7
import java.io.InputStreamReader;
8
import java.nio.charset.Charset;
9
import java.nio.file.Files;
10
import java.nio.file.Path;
11
import java.nio.file.Paths;
12
import java.util.ArrayList;
13
import java.util.List;
14
import java.util.Scanner;
15
​
16
class CrashMinimizer {
17

18
    /**
19
     * This function minimizes a crashing test case to
20
     * a single character that still causes the crash.
21
     *
22
     * @param String command - the command to execute the
23
     *                         program under test.
24
     *
25
     * @param String failingTestInputFilename - the path
26
     *                to the file causing a crash in the
27
     *                target program. The contents of
28
     *                this file are to be minimized by
29
     *                this function.
30
     *
31
     * @return String - the final, minimized version of the
32
     *                failing test input file which still
33
     *                causes a crash.
34
    */
35
    public static String minimize(
36
        String command,
37
        String failingInputFilename
38
    ) throws FileNotFoundException, IOException {
39
        List<String> lines = Utilities.readFile(failingInputFilename);
40
        String line = Utilities.runCommand(command + " " + failingInputFilename);
41

42

43
        return "";
44
    }
45
}
Crash Minimizer
Background
Delta debugging is a general methodology for locating bugs in a failing test input to a program. The method works by making a hypothesis about where the bug may be located in the input and iteratively refining the hypothesis until the test case is minimal. A minimal test case is one in which removing any portion of the test case no longer causes a crash.

Minimal test cases are useful for isolating the cause of an error when submitting bug reports to application authors. For example, bug reports to Mozilla which include HTML pages that cause crashes in the Firefox browser could be simplified to a single tag that might be triggering the problem, speeding up the turnaround time for a patch, eliminating duplicate reports and easing the burden on engineers.

Delta debugging can also be useful for isolating lines in source code that cause bugs by analyzing changes in the history of a file, making it a useful technique for IDE integration and version control systems.

Your task
In this challenge, you'll be writing a crash minimizing utility of your own using the Delta Debugging methodology. The minimizer will operate on programs that take a text file as input. Such programs may crash given certain input data. The goal of the minimizer function is to minimize the input file to the smallest subset of the input that still triggers the crash.

Your program will work by repeatedly running the target application under test, analyzing whether the program crashes given subsets of the input, responding accordingly, and repeating until the input has been minimized. Your job is to decide upon and write an algorithm for efficiently isolating the crash and use it to return the minimal input string causing the crash.

The function you'll be completing has the following signature:

CrashMinimizer.minimize(command, failingTestInputFilename)
Parameters
command: String - The command to execute the program under test.

failingTestInputFilename: String - The path to the file causing a crash in the target program. The contents of this file are to be minimized by this function.

Return Value
String - The final, minimized version of the failing test input file which still causes a crash.

Simplifying assumptions
For this challenge, you may assume:

All crashing target applications under test will accept one command line argument representing the input text file and will be run with java target_application path_to_input_filename.txt.
All input files contain exactly one character that causes a crash--no more or less.
All input files are guaranteed to contain a crashing character somewhere within the input (consider these files as having been taken from crash reports for the application under test).
Any emission to stderr by the application under test is considered to be a test failure caused by a crash based deterministically on provided input. Conversely, the target application will not write to stderr at all on a successful run. In other words, use the presence or absence of stderr to determine whether a program under test crashed or not on a given input.
Input files to the target application under test will consist of 1 ≤ lines ≤ 1000, each line containing 0 ≤ characters ≤ 300.
A provided test case may already be minimal. In such a circumstance, simply return the given file content as-is.

Resources
Utility functions have been provided for your use which can run subprocesses, collect stderr from subprocesses and read and write lists to and from files. These can be modified as you wish or ignored entirely.

For more information and guidance in solving this challenge, feel free to consult the following brief articles which offer additional clarification and concrete approaches you may use to implement your algorithm:

https://en.wikipedia.org/wiki/Delta_debugging
https://en.wikipedia.org/wiki/Bisection_(software_engineering)
https://www.st.cs.uni-saarland.de/dd/ (just the front page suffices; there is no need to read research papers to complete this challenge!)
Examples
Consider a program, CaesarCipher, which performs a Caesar cipher on an input text file. A Caesar cipher is an ancient (and very brittle) form of encryption which involves "rotating" each character in the file to another character a fixed number of positions.

The CaesarCipher program contains a bug that makes it unable to handle UTF-8 characters, which use multiple bytes per character. The presence of at least one UTF-8 character in the input file upsets an array size calculation in the program, causing an uncaught ArrayIndexOutOfBoundsException to be thrown.

Example 1
Here is an input file containing a UTF-8 character, example_01.txt, which causes a crash in the cipher application:

Gaius Julius Cæsar (12 or 13 July 100 BC - 15 March 44 BC),
was a Roman dictator, politician, military general, and historian
who played a critical role in the events that led to the demise
of the Roman Republic and the rise of the Roman Empire. He also
wrote Latin prose.
Let's take a look at a run of the debugger program on this input file:

String commandToTest = "java CaesarCipher";
String failingInputFilename = "example_01.txt";
String actual = CrashMinimizer.minimize(commandToTest, failingInputFilename);
System.out.println(actual); // => "æ"
The debugger is able to identify the string "æ" at line 1, position 15 as being a minimal version of the above file that still causes a crash.

Example 2
Here is a second input file which crashes the cipher, example_02.txt:

Up ↑ is the direction
Let's take a look at a run of the minimizer program on this input file:

String commandToTest = "java CaesarCipher";
String failingInputFilename = "example_02.txt";
String actual = CrashMinimizer.minimize(commandToTest, failingInputFilename);
System.out.println(actual); // => "↑"
Once again, the function was able to produce minimal crashing input from this text file.

You're welcome to modify the input files and write your own tests in test/java/debug/CandidateTest.java.

